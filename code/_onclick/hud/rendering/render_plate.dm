/*!
 * Custom rendering solution to allow for advanced effects
 * We (ab)use plane masters and render source/target to cheaply render 2+ planes as 1
 * if you want to read more read the _render_readme.md
 */


/**
 * Render relay object assigned to a plane master to be able to relay it's render onto other planes that are not it's own
 */
/atom/movable/render_plane_relay
	screen_loc = "CENTER"
	layer = -1
	plane = 0
	appearance_flags = PASS_MOUSE | NO_CLIENT_COLOR | KEEP_TOGETHER

/**
 * ## Rendering plate
 *
 * Acts like a plane master, but for plane masters
 * Renders other planes onto this plane, through the use of render objects
 * Any effects applied onto this plane will act on the unified plane
 * IE a bulge filter will apply as if the world was one object
 * remember that once planes are unified on a render plate you cant change the layering of them!
 */
/atom/movable/screen/plane_master/rendering_plate
	name = "default rendering plate"


///this plate renders the final screen to show to the player
/atom/movable/screen/plane_master/rendering_plate/master
	name = "master rendering plate"
	plane = RENDER_PLANE_MASTER
	render_relay_planes = list()
	generate_render_target = FALSE

// Master plates relay their render "up" to the transparent floor a level above them
/atom/movable/screen/plane_master/rendering_plate/master/update_offset()
	name = "[initial(name)] #[offset]"
	SET_PLANE_W_SCALAR(src, real_plane, offset)
	render_relay_planes = list()
	if(offset)
		generate_render_target = TRUE
		// We're gonna layer up to the transparent floor
		// Basically we're passing our rendering "up" the pipeline
		render_relay_planes += GET_NEW_PLANE(TRANSPARENT_FLOOR_PLANE, offset - 1)
	else
		generate_render_target = FALSE
	if(initial(render_target))
		render_target = "[initial(render_target)] #[offset]"

///renders general in charachter game objects
/atom/movable/screen/plane_master/rendering_plate/game_world
	name = "game rendering plate"
	plane = RENDER_PLANE_GAME
	render_relay_planes = list(RENDER_PLANE_MASTER)

/atom/movable/screen/plane_master/rendering_plate/game_world/Initialize(mapload)
	. = ..()
	add_filter("displacer", 1, displacement_map_filter(render_source = OFFSET_RENDER_TARGET(GRAVITY_PULSE_RENDER_TARGET, offset), size = 10))

///render plate for OOC stuff like ghosts, hud-screen effects, etc
/atom/movable/screen/plane_master/rendering_plate/non_game
	name = "non-game rendering plate"
	plane = RENDER_PLANE_NON_GAME
	render_relay_planes = list(RENDER_PLANE_MASTER)

/**
 * Plane master proc called in backdrop() that creates relay objects, sets them as needed and then adds them to the clients screen
 * Sets:
 * * layer from plane to avoid z-fighting
 * * planes to relay the render to
 * * render_source so that the plane will render on these objects
 * * mouse opacity to ensure proper mouse hit tracking
 * * name for debugging purposes
 * Other vars such as alpha will automatically be applied with the render source
 * Arguments:
 * * mymob: mob whose plane is being backdropped
 * * relay_to: a list of planes we are relaying this plane master to
 */
/atom/movable/screen/plane_master/proc/relay_render_to_plane(mob/mymob, list/relay_to)
	var/client/our_client = mymob.client
	if(!our_client)
		return
	// Backdrop can be called more then once
	if(length(relays))
		our_client.screen += relays
		return

	if(!initial(render_target) && generate_render_target)
		render_target = OFFSET_RENDER_TARGET("*[name]: AUTOGENERATED RENDER TGT", offset)

	var/blend_to_use = blend_mode_override || blend_mode
	for(var/relay_plane in relay_to)
		var/atom/movable/render_plane_relay/relay = new()
		relay.render_source = render_target
		relay.plane = relay_plane
		// There are two rules here
		// 1: layer needs to be positive (negative layers are treated as float layers)
		// 2: lower planes (including offset ones) need to be layered below higher ones (because otherwise they'll render fucky)
		// By multiplying LOWEST_EVER_PLANE by 30, we give 30 offsets worth of room to planes before they start going negative
		// Bet
		relay.layer = (plane + abs(LOWEST_EVER_PLANE * 30)) //layer must be positive but can be a decimal
		relay.blend_mode = blend_to_use
		relay.mouse_opacity = mouse_opacity
		relay.name = render_target
		our_client.screen += relay
		relays += relay

	if(blend_mode != BLEND_MULTIPLY)
		blend_mode = BLEND_DEFAULT
