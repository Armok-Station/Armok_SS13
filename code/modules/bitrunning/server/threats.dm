/// Adds threats to the list and notifies players
/obj/machinery/quantum_server/proc/add_threats(mob/living/threat)
	spawned_threat_refs.Add(WEAKREF(threat))
	SEND_SIGNAL(src, COMSIG_BITRUNNER_THREAT_CREATED)

/// Choses which antagonist role is spawned based on threat
/obj/machinery/quantum_server/proc/get_antagonist_role()
	var/list/available = list()

	for(var/datum/antagonist/bitrunning_glitch/subtype in subtypesof(/datum/antagonist/bitrunning_glitch))
		if(threat >= initial(subtype.threat))
			available += subtype

	shuffle_inplace(available)
	var/datum/antagonist/bitrunning_glitch/chosen = pick(available)

	threat -= chosen.threat * 0.5

	return chosen

/// Polls for a ghost that wants to run it
/obj/machinery/quantum_server/proc/get_ghost_mind(datum/antagonist/bitrunning_glitch/antag_datum)
	var/list/mob/dead/observer/ghosties = poll_ghost_candidates("A short term antagonist role is available. Would you like to spawn as a [initial(antag_datum.name)]?", ROLE_GLITCH)

	if(!length(ghosties))
		return

	shuffle_inplace(ghosties)

	var/mob/dead/selected = pick(ghosties)

	if(isnull(selected))
		ghosties.Remove(selected)
		selected = pick(ghosties)

	var/datum/mind/player_mind = new(selected.key)
	player_mind.active = TRUE

	return player_mind

/// Selects a target to mutate. Gives two attempts, then crashes if it fails.
/obj/machinery/quantum_server/proc/get_mutation_target(list/refs)
	var/datum/weakref/target_ref = pick(refs)
	var/mob/living/resolved = target_ref.resolve()

	if(resolved)
		return resolved

	refs.Remove(target_ref)
	target_ref = pick(refs)
	resolved = target_ref.resolve()

	return resolved

/// Gets all mobs originally generated by the loaded domain and returns a list that are capable of being antagged
/obj/machinery/quantum_server/proc/get_valid_domain_targets()
	for(var/datum/weakref/creature_ref as anything in mutation_candidate_refs)
		var/mob/living/creature = creature_ref.resolve()
		if(isnull(creature) || creature.mind)
			mutation_candidate_refs.Remove(creature_ref)

	return shuffle(mutation_candidate_refs)

/// Finds any mobs with minds in the zones and gives them the bad news
/obj/machinery/quantum_server/proc/notify_spawned_threats()
	for(var/datum/weakref/baddie_ref as anything in spawned_threat_refs)
		var/mob/living/baddie = baddie_ref.resolve()
		if(isnull(baddie) || baddie.stat >= UNCONSCIOUS || isnull(baddie.mind))
			continue

		baddie.throw_alert(
			ALERT_BITRUNNER_RESET,
			/atom/movable/screen/alert/bitrunning/qserver_threat_deletion,
			new_master = src,
		)

		to_chat(baddie, span_userdanger("You have been flagged for deletion! Thank you for your service."))

/// Procedurally links all the spawning procs together.
/obj/machinery/quantum_server/proc/spawn_glitch()
	if(QDELETED(src) || isnull(generated_domain) || !is_ready || !is_operational)
		return

	var/list/mutation_candidate_refs = get_valid_domain_targets()
	if(!length(mutation_candidate_refs))
		return

	var/mob/living/mutation_target = get_mutation_target(mutation_candidate_refs)
	if(isnull(mutation_target))
		CRASH("vdom: After two attempts, no valid mutation target was found.")

	mutation_target.add_overlay(mutable_appearance('icons/effects/beam.dmi', "lightning12", ABOVE_MOB_LAYER))

	notify_ghosts("A glitch is spawning in the virtual domain.", enter_link = "<a href=?src=[REF(src)];activate=1>(Click to play)</a>", source = mutation_target, action = NOTIFY_JUMP, header = "Data Mutation", flashwindow = FALSE)

	var/datum/antagonist/bitrunning_glitch/chosen_role = get_antagonist_role()
	var/role_name = initial(chosen_role.name)

	var/datum/mind/ghost_mind = get_ghost_mind(chosen_role)
	if(isnull(ghost_mind) || QDELETED(mutation_target))
		mutation_target.cut_overlays()
		return

	var/mob/living/antag_mob
	switch(role_name)
		if(ROLE_CYBER_POLICE)
			antag_mob = spawn_humanoid(mutation_target, ghost_mind)
		if(ROLE_CYBER_TACTICAL)
			antag_mob = spawn_humanoid(mutation_target, ghost_mind)
		if(ROLE_CYBER_BEHEMOTH)
			antag_mob = spawn_megafauna(mutation_target, ghost_mind)

	ghost_mind.transfer_to(antag_mob)
	ghost_mind.add_antag_datum(chosen_role)
	ghost_mind.special_role = ROLE_GLITCH
	ghost_mind.set_assigned_role(SSjob.GetJobType(/datum/job/bitrunning_glitch))

	playsound(antag_mob, 'sound/magic/ethereal_exit.ogg', 50, TRUE)
	message_admins("[ADMIN_LOOKUPFLW(antag_mob)] has been made into virtual antagonist by an event.")
	antag_mob.log_message("was spawned as a virtual antagonist by an event.", LOG_GAME)

	add_threats(antag_mob)

/// Spawns a humanoid on the target
/obj/machinery/quantum_server/proc/spawn_humanoid(mob/living/mutation_target, datum/mind/player_mind)
	var/mob/living/carbon/human/new_agent = new(mutation_target.loc)
	mutation_target.gib(DROP_ALL_REMAINS)

	return new_agent

/// Spawns something much more dangerous
/obj/machinery/quantum_server/proc/spawn_megafauna(mob/living/mutation_target, datum/mind/player_mind)
	var/list/threats = list(
		/mob/living/simple_animal/hostile/megafauna/dragon/virtual_domain,
		/mob/living/simple_animal/hostile/megafauna/colossus/virtual_domain,
		/mob/living/simple_animal/hostile/megafauna/bubblegum/virtual_domain,
		/mob/living/simple_animal/hostile/megafauna/wendigo/virtual_domain,
	)

	var/path = pick(threats)

	var/mob/living/simple_animal/hostile/megafauna/behemoth = new path(mutation_target.loc)
	behemoth.crusher_loot.Cut()
	behemoth.loot.Cut()
	mutation_target.gib(DROP_ALL_REMAINS)

	return behemoth

/// Oh boy - transports the antag station side
/obj/machinery/quantum_server/proc/station_spawn(mob/living/antag, obj/machinery/byteforge/chosen_forge)
	if(ishuman(antag))
		reset_equipment(antag)

	antag.AddComponent(/datum/component/glitch, \
		server = src, \
		forge = chosen_forge, \
	)

	chosen_forge.flicker(angry = TRUE)
	if(!do_after(antag, 1 SECONDS))
		return

	chosen_forge.flash()
	do_teleport(antag, get_turf(chosen_forge), forced = TRUE)
